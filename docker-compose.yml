version: '3.8'

services:

  fastapi:
    # build: ./app_fastapi/
    image: ghcr.io/blueswen/opentelemetry-apm/fastapi:latest
    ports:
      - "8000:8000"
    environment:
      - TARGET_ONE_SVC=spring-boot:8081
      - TARGET_TWO_SVC=spring-boot:8081
      - OTEL_TRACES_EXPORTER=otlp
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_METRICS_EXPORTER=none
      - OTEL_SERVICE_NAME=fastapi
    command: "opentelemetry-instrument python main.py"
    container_name: serversage-fastapi
    networks:
      serversage-network:
        aliases:
          - fastapi

  spring-boot:
    image: aniketxshinde/serversage:0.1.0
    ports:
      - "8081:8081"
    environment:
      - TARGET_ONE_SVC=fastapi:8000
      - TARGET_TWO_SVC=fastapi:8000
      - SERVER_PORT=8081
      - OTEL_EXPORTER=otlp_span
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
      - OTEL_EXPORTER_OTLP_INSECURE=true
      - OTEL_METRICS_EXPORTER=none
      - OTEL_SERVICE_NAME=spring-boot
    command: "java -javaagent:/opentelemetry-javaagent.jar -jar /app.jar"
    container_name: serversage-spring-boot
    networks:
      serversage-network:
        aliases:
          - spring-boot

  spring-boot-user:
    image: aniketxshinde/serversage:0.1.1
    ports:
      - "8082:8082"
    environment:
      - SERVER_PORT=8082
      - OTEL_EXPORTER=otlp
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
      - OTEL_EXPORTER_OTLP_INSECURE=true
      - OTEL_METRICS_EXPORTER=none
      - OTEL_SERVICE_NAME=spring-boot-user
      - SPRING_DATASOURCE_URL=jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
    command: "java -javaagent:/opentelemetry-javaagent.jar -jar ./app-user.jar"
    container_name: serversage-spring-boot-user
    networks:
      serversage-network:
        aliases:
          - spring-boot-user

  express:
    # build: ./app_express/
    image: ghcr.io/blueswen/opentelemetry-apm/express:latest
    ports:
      - "3001:3001"
    environment:
      - EXPOSE_PORT=3001
      - TARGET_ONE_SVC=fastapi:8000
      - TARGET_TWO_SVC=fastapi:8000
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_SERVICE_NAME=express
    command: "node --require '@opentelemetry/auto-instrumentations-node/register' app.js"
    container_name: serversage-express
    networks:
      serversage-network:
        aliases:
          - express

# OpenSearch
  opensearch:
    image: opensearchproject/opensearch:2.18.0
    container_name: serversage-opensearch
    deploy:
      resources:
        limits:
          memory: 700mb
    restart: unless-stopped
    environment:
      - cluster.name=aws-demo-cluster
      - node.name=demo-node
      - bootstrap.memory_lock=true
      - discovery.type=single-node
      - OPENSEARCH_JAVA_OPTS=-Xms300m -Xmx300m
      - DISABLE_INSTALL_DEMO_CONFIG=true
      - DISABLE_SECURITY_PLUGIN=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    ports:
      - "9200"
    healthcheck:
      test: curl -s http://localhost:9200/_cluster/health | grep -E '"status":"(green|yellow)"'
      start_period: 10s
      interval: 5s
      timeout: 10s
      retries: 10
    networks:
      serversage-network:
        aliases:
          - opensearch

  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    command:
      - "--config=/conf/config.yaml"
    volumes:
      - ./etc/otel-collector-config.yaml:/conf/config.yaml
    ports:
      # - "4317:4317" # OTLP gRPC receiver
      - "4318:4318" # OTLP http receiver
      - "8889:8889" # Prometheus metrics exporter
    restart: on-failure
    container_name: otel-collector
    networks:
      serversage-network:
        aliases:
          - otel-collector

  tempo:
    image: grafana/tempo:latest
    command: [ "--target=all", "-config.file=/etc/tempo.yaml", "--auth.enabled=false" ]
    user: root
    volumes:
      - ./data/tempo:/var/tempo
      - ./etc/tempo.yaml:/etc/tempo.yaml  
    ports:
      - "3200:3200"   # tempo
      - "4317:4317"  # otlp grpc
    container_name: serversage-tempo
    networks:
      serversage-network:
        aliases:
          - tempo

  prometheus:
    image: prom/prometheus:latest
    container_name: serversage-prometheus
    # user: "65534:65534"  # nobody:nobody user
    user: root
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./data/prometheus:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      # - '--storage.tsdb.retention.time=30d'  # Set retention period
      # - '--storage.tsdb.retention.size=50GB'  # Data older than 30d OR exceeding 50GB will be deleted
    restart: unless-stopped
    networks:
      serversage-network:
        aliases:
          - prometheus

  grafana:
    image: aniketxshinde/serversage:latest
    container_name: serversage-grafana
    user: root
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD", "curl -f http://localhost:3000/api/health || exit 1"]
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 10
    volumes:
      - ./data/grafana:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini
    environment:
      # GF_PATHS_DATA: /data/grafana
      GF_INSTALL_PLUGINS: grafana-opensearch-datasource
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: serversage
      GF_SERVER_ROOT_URL: ${GRAFANA_ROOT_URL}
      GF_SERVER_DOMAIN: ${GRAFANA_DOMAIN}
      GF_AUTH_GENERIC_OAUTH_ENABLED: true
      GF_AUTH_MANAGED_SERVICE_ACCOUNTS_ENABLED: true
      GF_AUTH_GENERIC_OAUTH_NAME: Keycloak
      GF_AUTH_GENERIC_OAUTH_ALLOW_SIGN_UP: true
      GF_AUTH_GENERIC_OAUTH_CLIENT_ID: ${OAUTH_CLIENT_ID}
      GF_AUTH_GENERIC_OAUTH_SCOPES: openid email profile roles offline_access
      GF_AUTH_GENERIC_USE_REFRESH_TOKENS: true
      GF_AUTH_GENERIC_OAUTH_EMAIL_ATTRIBUTE_PATH: email
      GF_AUTH_GENERIC_OAUTH_LOGIN_ATTRIBUTE_PATH: username
      GF_AUTH_GENERIC_OAUTH_NAME_ATTRIBUTE_PATH: full_name
      GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET: ${OAUTH_CLIENT_SECRET}
      GF_AUTH_GENERIC_OAUTH_AUTH_URL: ${KEYCLOAK_AUTH_URL}
      GF_AUTH_GENERIC_OAUTH_TOKEN_URL: ${KEYCLOAK_TOKEN_URL}
      GF_AUTH_GENERIC_OAUTH_API_URL: ${KEYCLOAK_API_URL}
      GF_AUTH_SIGNOUT_REDIRECT_URL: ${KEYCLOAK_LOGOUT_URL}?id_token_hint=%{id_token}&post_logout_redirect_uri=http%3A%2F%2Flocalhost%3A3000%2Flogin
      GF_AUTH_GENERIC_OAUTH_ROLE_ATTRIBUTE_PATH: contains(roles[*], 'grafana_grafana_admin') && 'GrafanaAdmin' || contains(roles[*], 'grafana_admin') && 'Admin' || contains(roles[*], 'grafana_editor') && 'Editor' || 'Viewer'
      GF_PLUGINS_PREINSTALL: grafana-llm-app,grafana-oncall-app
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      serversage-network:
        aliases:
          - grafana

  grafana-init:
    image: alpine/curl:latest
    depends_on:
      grafana:
        condition: service_healthy
    command: 
      - sh
      - ./enable-grafana-oncall-plugin.sh
    restart: "no" # Run once and exit
    networks:
      serversage-network:
        aliases:
          - grafana-init

  oncall:
    image: grafana/oncall
    user: "root"
    restart: always
    ports:
      - "8080:8080"
    command: sh -c "uwsgi --ini uwsgi.ini"
    environment:
      DATABASE_TYPE: sqlite3
      BROKER_TYPE: redis
      BASE_URL: http://oncall:8080
      SECRET_KEY: my_random_secret_must_be_more_than_32_characters_long
      FEATURE_PROMETHEUS_EXPORTER_ENABLED: false
      PROMETHEUS_EXPORTER_SECRET: ${PROMETHEUS_EXPORTER_SECRET:-prometheus}
      REDIS_URI: redis://redis:6379/0
      DJANGO_SETTINGS_MODULE: settings.hobby
      CELERY_WORKER_QUEUE: "default,critical,long,slack,telegram,webhook,retry,celery,grafana"
      CELERY_WORKER_CONCURRENCY: "1"
      CELERY_WORKER_MAX_TASKS_PER_CHILD: "100"
      CELERY_WORKER_SHUTDOWN_INTERVAL: "65m"
      CELERY_WORKER_BEAT_ENABLED: "True"
      GRAFANA_API_URL: http://grafana:3000
    volumes:
      - ./data/oncall:/var/lib/oncall
    depends_on:
      oncall_db_migration:
        condition: service_completed_successfully
    networks:
      serversage-network:
        aliases:
          - oncall

  celery:
    image: grafana/oncall
    user: "root"
    restart: always
    command: sh -c "./celery_with_exporter.sh"
    environment:
      DATABASE_TYPE: sqlite3
      BROKER_TYPE: redis
      BASE_URL: http://oncall:8080
      SECRET_KEY: my_random_secret_must_be_more_than_32_characters_long
      FEATURE_PROMETHEUS_EXPORTER_ENABLED: false
      PROMETHEUS_EXPORTER_SECRET: ${PROMETHEUS_EXPORTER_SECRET:-prometheus}
      REDIS_URI: redis://redis:6379/0
      DJANGO_SETTINGS_MODULE: settings.hobby
      CELERY_WORKER_QUEUE: "default,critical,long,slack,telegram,webhook,retry,celery,grafana"
      CELERY_WORKER_CONCURRENCY: "1"
      CELERY_WORKER_MAX_TASKS_PER_CHILD: "100"
      CELERY_WORKER_SHUTDOWN_INTERVAL: "65m"
      CELERY_WORKER_BEAT_ENABLED: "True"
      GRAFANA_API_URL: http://grafana:3000
    volumes:
      - ./data/oncall:/var/lib/oncall
    depends_on:
      oncall_db_migration:
        condition: service_completed_successfully
    networks:
      serversage-network:
        aliases:
          - celery

  oncall_db_migration:
    image: grafana/oncall
    user: "root"
    command: python manage.py migrate --noinput
    environment:
      DATABASE_TYPE: sqlite3
      BROKER_TYPE: redis
      BASE_URL: http://oncall:8080
      SECRET_KEY: my_random_secret_must_be_more_than_32_characters_long
      FEATURE_PROMETHEUS_EXPORTER_ENABLED: false
      PROMETHEUS_EXPORTER_SECRET: ${PROMETHEUS_EXPORTER_SECRET:-prometheus}
      REDIS_URI: redis://redis:6379/0
      DJANGO_SETTINGS_MODULE: settings.hobby
      CELERY_WORKER_QUEUE: "default,critical,long,slack,telegram,webhook,retry,celery,grafana"
      CELERY_WORKER_CONCURRENCY: "1"
      CELERY_WORKER_MAX_TASKS_PER_CHILD: "100"
      CELERY_WORKER_SHUTDOWN_INTERVAL: "65m"
      CELERY_WORKER_BEAT_ENABLED: "True"
      GRAFANA_API_URL: http://grafana:3000
    volumes:
      - ./data/oncall:/var/lib/oncall
    networks:
      serversage-network:
        aliases:
          - oncall_db_migration


  redis:
    image: redis:7.0.15
    restart: always
    expose:
      - 6379
    volumes:
      - ./data/redis:/data
    deploy:
      resources:
        limits:
          memory: 500m
          cpus: "0.5"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 5s
      interval: 5s
      retries: 10
    networks:
      serversage-network:
        aliases:
          - redis

  postgres_exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: serversage-postgres-exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}?sslmode=disable"
      PG_EXPORTER_EXTEND_QUERY_PATH: "/queries.yaml"
    volumes:
      - ./etc/queries.yaml:/queries.yaml
    ports:
      - "9187:9187"
    depends_on:
      - postgres
#    restart: unless-stopped
    networks:
      serversage-network:
        aliases:
          - postgres-exporter

  cloudwatch-exporter:
    image: prom/cloudwatch-exporter:latest
    ports:
      - "9106:9106"
    volumes:
      - ./cloudwatch-exporter:/config
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=us-east-1
    command:
      - /config/config.yml
    restart: unless-stopped
    # container_name: serversage-cloudwatch-exporter
    networks:
      serversage-network:
        aliases:
          - cloudwatch-exporter

  postgres:
    image: postgres:16
    container_name: postgres_demo
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
      serversage-network:
        aliases:
          - postgres

  keycloak:
    image: quay.io/keycloak/keycloak:25.0.1
    container_name: 'keycloak_demo'
    command: start-dev --import-realm 
    environment:
      - KC_HOSTNAME=${KEYCLOAK_PUBLIC_URL}/
      - KC_HOSTNAME_STRICT=false
      - KC_HOSTNAME_BACKCHANNEL_DYNAMIC=true
      - KC_HTTP_ENABLED=true    
      - KC_DB=postgres
      - KC_DB_USERNAME=${POSTGRES_USER}
      - KC_DB_PASSWORD=${POSTGRES_PASSWORD}
      - KC_DB_URL_HOST=postgres
      - KC_DB_URL_PORT=5432
      - KC_DB_URL_DATABASE=${POSTGRES_DB}
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
      - KC_METRICS_ENABLED=true
      - KC_HTTP_METRICS_HISTOGRAMS_ENABLED=true
      - KC_CACHE_METRICS_HISTOGRAMS_ENABLED=true
      - KC_HTTP_METRICS_SLOS=5,10,25,50,250,500,1000,2500,5000,10000
      - KC_EVENT_METRICS_USER_ENABLED=true
      - KC_EVENT_METRICS_USER_EVENTS=login,logout,register,update_profile,reset_password,user_disabled_by_temporary_lockout,user_disabled_by_permanent_lockout
      - KC_EVENT_METRICS_USER_TAGS=realm,clientId,idp
    depends_on:
      - postgres
    ports:
      - '3002:8080'
      - '9000:9000'
    volumes:
      - ./keycloak/realm-import:/opt/keycloak/data/import
    networks:
      serversage-network:
        aliases:
          - keycloak
          - keycloak-public

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    command:
      - '--path.rootfs=/host'
    ports:
      - "9100:9100"
    pid: host
    restart: unless-stopped
    volumes:
      - '/:/host:ro,rslave'
    networks:
      serversage-network:
        aliases:
          - node-exporter

networks:
  serversage-network:
    driver: bridge
    name: serversage-network
    attachable: true

volumes:
  data: